package org.example.hotelfind;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.4.2
 * 2012-05-09T12:00:15.393+01:00
 * Generated source version: 2.4.2
 * 
 */
@WebServiceClient(name = "HotelFind", 
                  wsdlLocation = "file:/home/a512471/workspaces/eclipse/FIWARE/MockServices/src/main/resources/wsdl/HotelFind.wsdl",
                  targetNamespace = "http://www.example.org/HotelFind/") 
public class HotelFind_Service extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.example.org/HotelFind/", "HotelFind");
    public final static QName HotelFindSOAP = new QName("http://www.example.org/HotelFind/", "HotelFindSOAP");
    static {
        URL url = null;
        try {
            url = new URL("file:/home/a512471/workspaces/eclipse/FIWARE/MockServices/src/main/resources/wsdl/HotelFind.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(HotelFind_Service.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/home/a512471/workspaces/eclipse/FIWARE/MockServices/src/main/resources/wsdl/HotelFind.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public HotelFind_Service(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public HotelFind_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public HotelFind_Service() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns HotelFind
     */
    @WebEndpoint(name = "HotelFindSOAP")
    public HotelFind getHotelFindSOAP() {
        return super.getPort(HotelFindSOAP, HotelFind.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HotelFind
     */
    @WebEndpoint(name = "HotelFindSOAP")
    public HotelFind getHotelFindSOAP(WebServiceFeature... features) {
        return super.getPort(HotelFindSOAP, HotelFind.class, features);
    }

}
